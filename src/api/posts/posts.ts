/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * JSON Placeholder API
 * See https://jsonplaceholder.typicode.com/
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import type { MaybeRef } from "@tanstack/vue-query/build/lib/types";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import { unref } from "vue";
import type { Post, PostsList } from "../../model";

/**
 * Returns all posts
 */
export const getPosts = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PostsList>> => {
  return axios.default.get(`/posts`, options);
};

export const getGetPostsQueryKey = () => {
  return [`/posts`] as const;
};

export const getGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  >;
};

export type GetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsQueryError = AxiosError<unknown>;

export const useGetPosts = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

/**
 * Returns a post by id
 */
export const getPost = (
  id: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Post>> => {
  id = unref(id);
  return axios.default.get(`/posts/${id}`, options);
};

export const getGetPostQueryKey = (id: MaybeRef<number>) => {
  id = unref(id);
  return [`/posts/${id}`] as const;
};

export const getGetPostQueryOptions = <
  TData = Awaited<ReturnType<typeof getPost>>,
  TError = AxiosError<void>
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPost>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetPostQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPost>>> = ({
    signal,
  }) => getPost(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getPost>>, TError, TData>;
};

export type GetPostQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPost>>
>;
export type GetPostQueryError = AxiosError<void>;

export const useGetPost = <
  TData = Awaited<ReturnType<typeof getPost>>,
  TError = AxiosError<void>
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPost>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};
